SHELL := /bin/bash
RUNDIR := $(shell pwd)
ifndef TOP
TOP := $(shell \
       top=$(RUNDIR); \
       while [ ! -r "$$top/Rules.top" ] && [ "$$top" != "" ]; do \
           top=$${top%/*}; \
       done; \
       echo $$top)
endif

# Define some useful colours
COLOR_BL := \033[34m
COLOR_CY := \033[36m
COLOR_PU := \033[35m
COLOR_GR := \033[32m
NOCOLOR := \033[0m

# Folder containing ancillary makefile inputs
MK := $(TOP)/mk

# Setup standard includes that will be used everywhere
# -isystem is used instead of -I where we want to suppress
# compiler warnings and dependency generation for stuff that
# we can't actually touch

# ROOT
USERINCLUDES += -isystem $(ROOTSYS)/include
# ROOFIT
#USERINCLUDES += -isystem $(ROOFITSYS)/inc
# BOOST - currently fixed to version 1.47.0, we will need to do some magic
# in the near futures to figure out the right version for the CMSSW release
#USERINCLUDES += -isystem $(CMS_PATH)/$(SCRAM_ARCH)/external/boost/1.47.0/include
USERINCLUDES += -isystem /usr/include/boost/
# CMSSW release area
#USERINCLUDES += -isystem $(CMSSW_RELEASE_BASE)/src
# CMSSW user area
USERINCLUDES += -I$(CMSSW_BASE)/
# Analysis area
USERINCLUDES += -I$(CMSSW_BASE)/UserCode/ICHiggsTauTau/Analysis

# Special includes for running the include-what-you-use tool on OS X
# USERINCLUDES += -isystem $(CMS_PATH)/$(SCRAM_ARCH)/external/gcc/4.6.2/include/c++/4.6.2
# USERINCLUDES += -isystem $(CMS_PATH)/$(SCRAM_ARCH)/external/gcc/4.6.2/include/c++/4.6.2/x86_64-apple-darwin11.2.0

# Define libraries to link
USERLIBS += $(shell root-config --glibs) -lGenVector -lTreePlayer -lTMVA
#USERLIBS += -L$(ROOFITSYS)/lib/ -lRooFit -lRooFitCore
USERLIBS += -L/usr/lib/ -lboost_regex -lboost_program_options -lboost_filesystem -lboost_system
#USERLIBS += -L$(CMSSW_BASE)/lib/$(SCRAM_ARCH) -lUserCodeICHiggsTauTau
#USERLIBS += -L$(CMSSW_RELEASE_BASE)/lib/$(SCRAM_ARCH) -lFWCoreFWLite -lPhysicsToolsFWLite -lCommonToolsUtils

CXX=g++
LD=g++
CXXFLAGS= -g -Wall -Wextra -O2 -std=c++0x
LDFLAGS= -g -shared -Wall -Wextra

# Extra gcc flags that will generate A LOT of warnings
# -pedantic -Weffc++

CXXFLAGS += $(USERINCLUDES)
LIBS += $(USERLIBS)

.PHONY: dir tree all clean clean_all clean_tree dist_clean

# Default target when nothing is given on the command line.  Reasonable
# options are:
# "dir"  - updates only targets from current directory and its dependencies
# "tree" - updates targets (and their dependencies) in whole subtree
#          starting at current directory
# "all"  - updates all targets in the project
.DEFAULT_GOAL := dir

dir : dir_$(RUNDIR)
	@echo -e "==> $(COLOR_GR)Directory '$(notdir $(RUNDIR))' updated$(NOCOLOR)"

tree : tree_$(RUNDIR)
	@echo -e "==> $(COLOR_GR)Directory tree starting at '$(notdir $(RUNDIR))' updated$(NOCOLOR)"

all : all_proxy
	@echo -e "==> $(COLOR_GR)Complete directory tree updated$(NOCOLOR)"

clean : clean_$(RUNDIR)

clean_tree : clean_tree_$(RUNDIR)


# $(d) keeps the path of "current" directory during tree traversal and
# $(dir_stack) is used for backtracking during traversal
d := $(TOP)
dir_stack :=

include $(MK)/header.mk
include $(MK)/footer.mk

# Automatic inclusion of the skel.mk at the top level - that way
# Rules.top has exactly the same structure as other Rules.mk
include $(MK)/skel.mk

$(eval $(value HEADER))
include $(TOP)/Rules.top
$(eval $(value FOOTER))

